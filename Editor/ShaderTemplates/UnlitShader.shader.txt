Shader "Custom/#SCRIPTNAME#"
{
    Properties
    {
        // Main Texture, color
        _BaseColor("Base Color", Color) = (1, 1, 1, 1)
        _BaseMap("Base Map", 2D) = "white" {}
    }
    SubShader
    {
        Tags { "Queue" = "Geometry" "RenderType" = "Opaque" "RenderPipeline" = "UniversalPipeline" }
        LOD 200

        Pass
        {
            Name "Unlit"
            Tags { "LightMode" = "SRPDefaultUnlit" }

            Blend Off
            ZWrite On
            Cull Back

            HLSLPROGRAM

            // Required to compile gles 2.0 with standard SRP library
            #pragma prefer_hlslcc gles
            #pragma target 2.0

            // Vertex/fragment functions
            #pragma vertex vert
            #pragma fragment frag

            // GPU Instancing
            #pragma multi_compile_instancing
            // Fog
            #pragma multi_compile_fog
            // For debug display
            #pragma multi_compile _ DEBUG_DISPLAY

            // URP includes
            #include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"
            // Required for debug display
            #include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/SurfaceData.hlsl"
            #include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Debug/Debugging3D.hlsl"
            
            // Properties
            CBUFFER_START(UnityPerMaterial)
                half4 _BaseColor;
                float4 _BaseMap_ST;
            CBUFFER_END

            // Texture samplers
            TEXTURE2D(_BaseMap);
            SAMPLER(sampler_BaseMap);

            // Required for debug display
            float4 _BaseMap_TexelSize;
            float4 _BaseMap_MipInfo;

            struct Attributes
            {
                float2 uv           : TEXCOORD0;
                float4 positionOS   : POSITION; // Object-space position
                
#ifdef DEBUG_DISPLAY
                // Required for debug display
                float3 normalOS     : NORMAL;   // Object-space normal
                float4 tangentOS    : TANGENT;  // Object-space tangent
#endif

                UNITY_VERTEX_INPUT_INSTANCE_ID
            };

            struct Varyings
            {
                float2 uv               : TEXCOORD0;
                half fogFactor          : TEXCOORD1;   // Fog factor
                float4 positionCS       : SV_POSITION; // Clip-space position

#ifdef DEBUG_DISPLAY
                // Required for debug display
                float3 positionWS       : TEXCOORD2;   // World-space position
                float3 normalWS         : TEXCOORD3;   // World-space normal
                float3 viewDirectionWS  : TEXCOORD4;   // World-space view direction
#endif

                UNITY_VERTEX_INPUT_INSTANCE_ID
                UNITY_VERTEX_OUTPUT_STEREO
            };

            Varyings vert(Attributes input)
            {
                Varyings output;

                // GPU instancing
                UNITY_SETUP_INSTANCE_ID(input);
                UNITY_TRANSFER_INSTANCE_ID(input, output);
                // Stereo
                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(output);

                // Transformations
                // See Packages/com.unity.render-pipelines.universal/ShaderLibrary/ShaderVariablesFunctions.hlsl for helper functions
                // See Packages/com.unity.render-pipelines.core/ShaderLibrary/SpaceTransforms.hlsl for individual transformation functions
                VertexPositionInputs positionInputs = GetVertexPositionInputs(input.positionOS.xyz);
                float4 positionCS = positionInputs.positionCS;
#ifdef DEBUG_DISPLAY
                // Variables required for debug display
                float3 positionWS = positionInputs.positionWS;
                VertexNormalInputs normalInputs = GetVertexNormalInputs(input.normalOS);
                float3 normalWS = normalInputs.normalWS;
                float3 tangentWS = normalInputs.tangentWS;
                float3 bitangentWS = normalInputs.bitangentWS;
#endif
                
                // Set output
                output.uv = TRANSFORM_TEX(input.uv, _BaseMap);
                output.positionCS = positionCS;
                output.fogFactor = ComputeFogFactor(positionCS.z);
#ifdef DEBUG_DISPLAY
                // Variables required for debug display
                output.positionWS = positionWS;
                output.viewDirectionWS = GetWorldSpaceViewDir(positionWS);
                output.normalWS = normalWS;
#endif
                
                return output;
            }

            half4 frag(Varyings input) : SV_Target
            {
                // Stereo
                UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(input);

                half4 color;

                // Sample texture + color
                half4 baseMap = SAMPLE_TEXTURE2D(_BaseMap, sampler_BaseMap, input.uv);
                color = baseMap * _BaseColor;

#ifdef DEBUG_DISPLAY
                // Initialize InputData, SurfaceData for use in debug display functions
                InputData inputData = (InputData)0;
                inputData.positionWS = input.positionWS;
                inputData.normalWS = input.normalWS;
                inputData.viewDirectionWS = input.viewDirectionWS;
                inputData.shadowCoord = 0;
                inputData.fogCoord = 0;
                inputData.vertexLighting = half3(0, 0, 0);
                inputData.bakedGI = half3(0, 0, 0);
                inputData.normalizedScreenSpaceUV = 0;
                inputData.shadowMask = half4(1, 1, 1, 1);

                SETUP_DEBUG_TEXTURE_DATA(inputData, input.uv, _BaseMap);

                SurfaceData surfaceData = (SurfaceData)0;
                surfaceData.albedo = color.rgb;
                surfaceData.alpha = 1;
                surfaceData.emission = 0;
                surfaceData.metallic = 0;
                surfaceData.occlusion = 1;
                surfaceData.smoothness = 1;
                surfaceData.specular = 0;
                surfaceData.clearCoatMask = 0;
                surfaceData.clearCoatSmoothness = 1;
                surfaceData.normalTS = half3(0, 0, 1);

                // Return debug display color if enabled
                half4 debugColor;
                if (CanDebugOverrideOutputColor(inputData, surfaceData, debugColor))
                {
                    return debugColor;
                }
#endif
                
                // Mix fog
                color.rgb = MixFog(color.rgb, input.fogFactor);

                return color;
            }

            ENDHLSL
        }
    }
}
