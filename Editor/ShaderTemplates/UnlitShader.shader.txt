Shader "Custom/#SCRIPTNAME#"
{
    Properties
    {
        // Main Texture, color
        _BaseColor("Base Color", Color) = (1, 1, 1, 1)
        _BaseMap("Base Map", 2D) = "white" {}
    }
    SubShader
    {
        Tags { "Queue" = "Geometry" "RenderType" = "Opaque" "RenderPipeline" = "UniversalPipeline" }
        LOD 200

        Pass
        {
            Name "Unlit"
            Tags { "LightMode" = "SRPDefaultUnlit" }

            Blend Off
            ZWrite On
            Cull Back

            HLSLPROGRAM

            // Required to compile gles 2.0 with standard SRP library
            #pragma prefer_hlslcc gles
            #pragma target 2.0

            // Vertex/fragment functions
            #pragma vertex vert
            #pragma fragment frag

            // GPU Instancing
            #pragma multi_compile_instancing
            // Fog
            #pragma multi_compile_fog
            
            // URP includes
            #include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"

            // Properties
            CBUFFER_START(UnityPerMaterial)
                half4 _BaseColor;
                float4 _BaseMap_ST;
            CBUFFER_END

            // Texture samplers
            TEXTURE2D(_BaseMap);
            SAMPLER(sampler_BaseMap);

            struct Attributes
            {
                float2 uv           : TEXCOORD0;
                float4 positionOS   : POSITION; // Object-space position

                UNITY_VERTEX_INPUT_INSTANCE_ID
            };

            struct Varyings
            {
                float2 uv               : TEXCOORD0;
                half fogFactor          : TEXCOORD1;   // Fog factor
                float4 positionCS       : SV_POSITION; // Clip-space position

                UNITY_VERTEX_INPUT_INSTANCE_ID
                UNITY_VERTEX_OUTPUT_STEREO
            };

            Varyings vert(Attributes input)
            {
                Varyings output;

                // GPU instancing
                UNITY_SETUP_INSTANCE_ID(input);
                UNITY_TRANSFER_INSTANCE_ID(input, output);
                // Stereo
                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(output);

                // Transformations
                // See Packages/com.unity.render-pipelines.universal/ShaderLibrary/ShaderVariablesFunctions.hlsl for helper functions
                // See Packages/com.unity.render-pipelines.core/ShaderLibrary/SpaceTransforms.hlsl for individual transformation functions
                VertexPositionInputs positionInputs = GetVertexPositionInputs(input.positionOS.xyz);
                float4 positionCS = positionInputs.positionCS;

                // Set output
                output.uv = TRANSFORM_TEX(input.uv, _BaseMap);
                output.positionCS = positionCS;
                output.fogFactor = ComputeFogFactor(positionCS.z);

                return output;
            }

            half4 frag(Varyings input) : SV_Target
            {
                // Stereo
                UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(input);

                half4 color;

                // Sample texture + color
                half4 baseMap = SAMPLE_TEXTURE2D(_BaseMap, sampler_BaseMap, input.uv);
                color = baseMap * _BaseColor;

                // Mix fog
                color.rgb = MixFog(color.rgb, input.fogFactor);

                return color;
            }

            ENDHLSL
        }
    }
}
