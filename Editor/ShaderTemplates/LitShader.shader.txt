Shader "Custom/#SCRIPTNAME#"
{
    Properties
    {
        // Main Texture, color
        _BaseColor("Base Color", Color) = (1, 1, 1, 1)
        _BaseMap("Base Map", 2D) = "white" {}

        // Normal map
        _BumpScale("Normal Scale", Float) = 1.0
        [Normal] _BumpMap("Normal Map", 2D) = "bump" {}

        // Specular map
        [HDR] _SpecularColor("Specular Color (RGB: Color, A: Smoothness)", Color) = (1, 1, 1, 1)
        _SpecularMap("Specular Map", 2D) = "white" {}

        // Emission map
        [HDR] _EmissionColor("Emission Color", Color) = (0,0,0)
        _EmissionMap("Emission Map", 2D) = "white" {}
    }
    SubShader
    {
        Tags { "Queue" = "Geometry" "RenderType" = "Opaque" "RenderPipeline" = "UniversalPipeline" }
        LOD 200

        // Forward pass
        Pass
        {
            Name "Forward"
            Tags { "LightMode" = "UniversalForward" }

            Blend Off
            ZWrite On
            Cull Back

            HLSLPROGRAM

            // Required to compile gles 2.0 with standard SRP library
            #pragma prefer_hlslcc gles
            #pragma target 2.0

            // Vertex/fragment functions
            #pragma vertex vert
            #pragma fragment frag

            // Keywords
            #pragma multi_compile _ _MAIN_LIGHT_SHADOWS
            #pragma multi_compile _ _MAIN_LIGHT_SHADOWS_CASCADE
            #pragma multi_compile _ _ADDITIONAL_LIGHTS
            #pragma multi_compile_fragment _ _ADDITIONAL_LIGHT_SHADOWS
            #pragma multi_compile_fragment _ _SHADOWS_SOFT
            #pragma multi_compile _ LIGHTMAP_ON
            #pragma multi_compile _ LIGHTMAP_SHADOW_MIXING

            // GPU Instancing
            #pragma multi_compile_instancing
            // Fog
            #pragma multi_compile_fog
            
            // URP includes
            #include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"
            #include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Lighting.hlsl"

            // Properties
            CBUFFER_START(UnityPerMaterial)
                half4 _BaseColor;
                float4 _BaseMap_ST;
                float _BumpScale;
                half3 _EmissionColor;
                half4 _SpecularColor;

                // Properties required by URP ShadowCasterPass.hlsl
                half _Cutoff;
            CBUFFER_END

            // Texture samplers
            TEXTURE2D(_BaseMap);
            SAMPLER(sampler_BaseMap);
            TEXTURE2D(_BumpMap);
            SAMPLER(sampler_BumpMap);
            TEXTURE2D(_EmissionMap);
            SAMPLER(sampler_EmissionMap);
            TEXTURE2D(_SpecularMap);
            SAMPLER(sampler_SpecularMap);

            struct Attributes
            {
                float2 uv           : TEXCOORD0;
                float4 positionOS   : POSITION;  // Object-space position
                float3 normalOS     : NORMAL;    // Object-space normal
                float4 tangentOS    : TANGENT;   // Object-space tangent
                float2 lightmapUV   : TEXCOORD1; // Lightmap UV

                UNITY_VERTEX_INPUT_INSTANCE_ID
            };

            struct Varyings
            {
                float2 uv               : TEXCOORD0;
                DECLARE_LIGHTMAP_OR_SH(lightmapUV, vertexSH, 1);  // GI (lightmap, ambient light)
                float3 positionWS       : TEXCOORD2;   // World-space position
                half3 normalWS          : TEXCOORD3;   // World-space normal
                half3 tangentWS         : TEXCOORD4;   // World-space tangent
                half3 bitangentWS       : TEXCOORD5;   // World-space bitangent
                half3 viewDirectionWS   : TEXCOORD6;   // World-space view direction

#ifdef REQUIRES_VERTEX_SHADOW_COORD_INTERPOLATOR
                float4 shadowCoord      : TEXCOORD7;   // Vertex shadow coords if required
#endif
                half fogFactor          : TEXCOORD8;   // Fog factor
                float4 positionCS       : SV_POSITION; // Clip-space position

                UNITY_VERTEX_INPUT_INSTANCE_ID
                UNITY_VERTEX_OUTPUT_STEREO
            };

            Varyings vert(Attributes input)
            {
                Varyings output;

                // GPU instancing
                UNITY_SETUP_INSTANCE_ID(input);
                UNITY_TRANSFER_INSTANCE_ID(input, output);
                // Stereo
                UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(output);

                // Transformations
                // See Packages/com.unity.render-pipelines.universal/ShaderLibrary/ShaderVariablesFunctions.hlsl for helper functions
                // See Packages/com.unity.render-pipelines.core/ShaderLibrary/SpaceTransforms.hlsl for individual transformation functions
                VertexPositionInputs positionInputs = GetVertexPositionInputs(input.positionOS.xyz);
                float4 positionCS = positionInputs.positionCS;
                float3 positionWS = positionInputs.positionWS;
                VertexNormalInputs normalInputs = GetVertexNormalInputs(input.normalOS);
                float3 normalWS = normalInputs.normalWS;
                float3 tangentWS = normalInputs.tangentWS;
                float3 bitangentWS = normalInputs.bitangentWS;

                // Set output
                OUTPUT_LIGHTMAP_UV(input.lightmapUV, unity_LightmapST, output.lightmapUV);
                OUTPUT_SH(normalWS, output.vertexSH);
                output.uv = TRANSFORM_TEX(input.uv, _BaseMap);
                output.positionCS = positionCS;
                output.positionWS = positionWS;
                output.viewDirectionWS = GetWorldSpaceViewDir(positionWS);
                output.normalWS = normalWS;
                output.tangentWS = tangentWS;
                output.bitangentWS = bitangentWS;
#ifdef REQUIRES_VERTEX_SHADOW_COORD_INTERPOLATOR
                // Vertex shadow coords if required
                output.shadowCoord = TransformWorldToShadowCoord(positionWS);
#endif
                output.fogFactor = ComputeFogFactor(positionCS.z);

                return output;
            }

            void LightingDiffuseSpecular(inout half3 diffuseColor, inout half3 specularColor, Light light, float3 normalWS, float3 viewDirectionWS, half3 specular, float smoothness)
            {
                half3 lightColor = light.color * light.distanceAttenuation * light.shadowAttenuation;

                // Diffuse
                float NDL = saturate(dot(normalWS, light.direction));
                diffuseColor += lightColor * NDL;
               
                // Specular
                float3 halfVector = normalize(light.direction + viewDirectionWS);
                float NDH = saturate(dot(normalWS, halfVector));
                float specularFactor = pow(NDH, smoothness);
                specularColor += lightColor * specular * specularFactor;
            }

            half4 LightingBlinnPhong(InputData inputData, half3 albedo, half4 specular, half3 emission, half alpha)
            {
                // Basic BlinnPhong lighting based on UniversalFragmentBlinnPhong function found in
                // Packages/com.unity.render-pipelines.universal/ShaderLibrary/Lighting.hlsl

                // Shadow mask
#if defined(SHADOWS_SHADOWMASK) && defined(LIGHTMAP_ON)
                half4 shadowMask = inputData.shadowMask;
#else
                half4 shadowMask = half4(1, 1, 1, 1);
#endif

                float smoothness = exp2(10 * specular.a + 1);

                half3 diffuseColor = 0;
                half3 specularColor = 0;

                // Main light
                Light mainLight = GetMainLight(inputData.shadowCoord, inputData.positionWS, shadowMask);
                MixRealtimeAndBakedGI(mainLight, inputData.normalWS, inputData.bakedGI);
                LightingDiffuseSpecular(diffuseColor, specularColor, mainLight, inputData.normalWS, inputData.viewDirectionWS, specular.rgb, smoothness);
                diffuseColor += inputData.bakedGI;

                // Additional lights
#ifdef _ADDITIONAL_LIGHTS
                int additionalLightCount = GetAdditionalLightsCount();
                for (int lightIndex = 0; lightIndex < additionalLightCount; ++lightIndex)
                {
                    Light light = GetAdditionalLight(lightIndex, inputData.positionWS, shadowMask);
                    LightingDiffuseSpecular(diffuseColor, specularColor, light, inputData.normalWS, inputData.viewDirectionWS, specular.rgb, smoothness);
                }
#endif

                // Final color
                half3 finalColor = diffuseColor * albedo + emission;
                finalColor += specularColor;

                return half4(finalColor, alpha);
            }

            half4 frag(Varyings input) : SV_Target
            {
                // Stereo
                UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(input);

                half4 color;

                float2 uv = input.uv;

                // Helper functions to sample base map, normal map, emission, specular can also be found in
                // Packages/com.unity.render-pipelines.universal/ShaderLibrary/SurfaceInput.hlsl

                // Sample base map + color
                half4 baseMap = SAMPLE_TEXTURE2D(_BaseMap, sampler_BaseMap, uv);
                color = baseMap * _BaseColor;
               
                // Sample normal map
#if BUMP_SCALE_NOT_SUPPORTED
                half3 normalTS = UnpackNormal(SAMPLE_TEXTURE2D(_BumpMap, sampler_BumpMap, uv));
#else
                half3 normalTS = UnpackNormalScale(SAMPLE_TEXTURE2D(_BumpMap, sampler_BumpMap, uv), _BumpScale);
#endif
                half3 normalWS = normalize(mul(normalTS, float3x3(input.tangentWS, input.bitangentWS, input.normalWS)));

                // Sample emission map
                half3 emission = SAMPLE_TEXTURE2D(_EmissionMap, sampler_EmissionMap, uv).rgb * _EmissionColor;

                // Sample specular map
                half4 specular = SAMPLE_TEXTURE2D(_SpecularMap, sampler_SpecularMap, uv) * _SpecularColor;

                // Shadow coord
#ifdef REQUIRES_VERTEX_SHADOW_COORD_INTERPOLATOR
                // Use vertex shadow coords if required
                float4 shadowCoord = input.shadowCoord;
#else
                // Otherwise, get per-pixel shadow coords
                float4 shadowCoord = TransformWorldToShadowCoord(input.positionWS);
#endif

                // Basic lighting
                // Built-in lighting functions can be found in Packages/com.unity.render-pipelines.universal/ShaderLibrary/Lighting.hlsl
                // Construct InputData
                InputData inputData;
                inputData.positionWS = input.positionWS;
                inputData.normalWS = normalWS;
                inputData.viewDirectionWS = input.viewDirectionWS;
                inputData.shadowCoord = shadowCoord;
                inputData.fogCoord = input.fogFactor;
                inputData.vertexLighting = 0;
                inputData.bakedGI = SAMPLE_GI(input.lightmapUV, input.vertexSH, normalWS);
                inputData.normalizedScreenSpaceUV = GetNormalizedScreenSpaceUV(input.positionCS);
                inputData.shadowMask = 0;
                // Lighting
                color = LightingBlinnPhong(inputData, color.rgb, specular, emission, color.a);

                // Mix fog
                color.rgb = MixFog(color.rgb, input.fogFactor);

                return color;
            }

            ENDHLSL
        }

        // Shadow caster pass
        Pass
        {
            Name "ShadowCaster"
            Tags { "LightMode" = "ShadowCaster" }

            ZWrite On
            ZTest LEqual

            HLSLPROGRAM

            // Required to compile gles 2.0 with standard SRP library
            #pragma prefer_hlslcc gles
            #pragma target 2.0

            // Vertex/fragment functions used by ShadowCasterPass.hlsl
            #pragma vertex ShadowPassVertex
            #pragma fragment ShadowPassFragment

            // GPU Instancing
            #pragma multi_compile_instancing

            // URP includes
            #include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"
            // Required by URP ShadowCasterPass.hlsl
            #include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/SurfaceInput.hlsl"

            // Properties (needs to be same across all passes for SRP batcher compatibility)
            CBUFFER_START(UnityPerMaterial)
                half4 _BaseColor;
                float4 _BaseMap_ST;
                float _BumpScale;
                half3 _EmissionColor;
                half4 _SpecularColor;

                // Properties required by URP ShadowCasterPass.hlsl
                half _Cutoff;
            CBUFFER_END

            // URP Shadow Caster pass
            #include "Packages/com.unity.render-pipelines.universal/Shaders/ShadowCasterPass.hlsl"

            ENDHLSL
        }

        // DepthOnly pass
        // Used to render to _CameraDepthTexture when depth copy is not supported
        Pass
        {
            Name "DepthOnly"
            Tags{"LightMode" = "DepthOnly"}

            ZWrite On
            Cull Back

            HLSLPROGRAM
            
            // Required to compile gles 2.0 with standard SRP library
            #pragma prefer_hlslcc gles
            #pragma target 2.0

            // Vertex/fragment functions used in URP's DepthOnlyPass
            #pragma vertex DepthOnlyVertex
            #pragma fragment DepthOnlyFragment

            // GPU Instancing
            #pragma multi_compile_instancing

            // URP includes
            #include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"
            // Required by URP DepthOnlyPass.hlsl
            #include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/SurfaceInput.hlsl"

            // Properties (needs to be same across all passes for SRP batcher compatibility)
            CBUFFER_START(UnityPerMaterial)
                half4 _BaseColor;
                float4 _BaseMap_ST;
                float _BumpScale;
                half3 _EmissionColor;
                half4 _SpecularColor;

                // Properties required by URP DepthOnlyPass.hlsl
                half _Cutoff;
            CBUFFER_END

            // URP DepthOnlyPass
            #include "Packages/com.unity.render-pipelines.universal/Shaders/DepthOnlyPass.hlsl"

            ENDHLSL
        }

        // DepthNormals pass
        // Used to render to _CameraNormalsTexture when depth copy is not supported
        Pass
        {
            Name "DepthNormals"
            Tags{"LightMode" = "DepthNormals"}

            ZWrite On
            Cull Back

            HLSLPROGRAM

            // Required to compile gles 2.0 with standard SRP library
            #pragma prefer_hlslcc gles
            #pragma target 2.0

            // Vertex/fragment functions used in URP's DepthNormalsPass
            #pragma vertex DepthNormalsVertex
            #pragma fragment DepthNormalsFragment

            // GPU Instancing
            #pragma multi_compile_instancing

            // URP includes
            #include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"
            // Required by URP DepthNormalsPass.hlsl
            #include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/SurfaceInput.hlsl"

            // Properties (needs to be same across all passes for SRP batcher compatibility)
            CBUFFER_START(UnityPerMaterial)
                half4 _BaseColor;
                float4 _BaseMap_ST;
                float _BumpScale;
                half3 _EmissionColor;
                half4 _SpecularColor;

                // Properties required by URP DepthNormalsPass.hlsl
                half _Cutoff;
            CBUFFER_END

            // URP DepthNormalsPass
            #include "Packages/com.unity.render-pipelines.universal/Shaders/DepthNormalsPass.hlsl"

            ENDHLSL
        }

        // Meta pass for light maps
        Pass
        {
            Name "Meta"
            Tags{ "LightMode" = "Meta" }

            Cull Off

            HLSLPROGRAM

            // Required to compile gles 2.0 with standard SRP library
            #pragma prefer_hlslcc gles
            #pragma target 2.0

            // Vertex/fragment functions
            #pragma vertex vert
            #pragma fragment frag

            // URP includes
            #include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"
            #include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/MetaInput.hlsl"

            // Properties
            CBUFFER_START(UnityPerMaterial)
                half4 _BaseColor;
                float4 _BaseMap_ST;
                float _BumpScale;
                half3 _EmissionColor;
                half4 _SpecularColor;

                // Properties required by URP ShadowCasterPass.hlsl
                half _Cutoff;
            CBUFFER_END

            // Texture samplers
            TEXTURE2D(_BaseMap);
            SAMPLER(sampler_BaseMap);
            TEXTURE2D(_EmissionMap);
            SAMPLER(sampler_EmissionMap);
            TEXTURE2D(_SpecularMap);
            SAMPLER(sampler_SpecularMap);

            struct Attributes
            {
                float2 uv0          : TEXCOORD0;
                float2 uv1          : TEXCOORD1;
                float2 uv2          : TEXCOORD2;
                float4 positionOS   : POSITION;  // Object-space position
                float3 normalOS     : NORMAL;    // Object-space normal
            };

            struct Varyings
            {
                float4 positionCS   : SV_POSITION;
                float2 uv           : TEXCOORD0;
            };

            Varyings vert(Attributes input)
            {
                Varyings output;

                // Set output
                output.positionCS = MetaVertexPosition(
                    input.positionOS,
                    input.uv1,
                    input.uv2,
                    unity_LightmapST,
                    unity_DynamicLightmapST
                );
                output.uv = TRANSFORM_TEX(input.uv0, _BaseMap);

                return output;
            }

            half4 frag(Varyings input) : SV_Target
            {
                half4 color;

                float2 uv = input.uv;

                // Construct MetaInput data
                MetaInput metaInput;
                // Albedo (base color)
                metaInput.Albedo = SAMPLE_TEXTURE2D(_BaseMap, sampler_BaseMap, uv).rgb * _BaseColor.rgb;
                // Specular
                metaInput.SpecularColor = SAMPLE_TEXTURE2D(_SpecularMap, sampler_SpecularMap, uv).rgb * _SpecularColor.rgb;
                // Emission
                metaInput.Emission = SAMPLE_TEXTURE2D(_EmissionMap, sampler_EmissionMap, uv).rgb * _EmissionColor;

                // Final color
                color = MetaFragment(metaInput);

                return color;
            }

            ENDHLSL
        }
    }
}